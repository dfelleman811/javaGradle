/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.2.1/userguide/building_java_projects.html in the Gradle documentation.
 */

 /*
 Gradle is object oriented
 it creates several objects
 two most important = project and task

 for every build.gradle / gradle project - gradle creates an object called project

 each 'block of code' below is a part of the Project Object that Gradle creates
 the 'blocks' (repositories, dependencies) are methods inside the project object 
 (groovy syntax does not need parentheses or the project. reference)

for instance

project.repositories ({ mavenCentral() }) <- this is simply a method to which we are passing a closure

closures can carry any code

N.B. plugins is not a method - it is just a block of code use to have 'apply plugin {}'

There is also a Task Object (what do the majority of work in our build scripts)
they are internally represented using a class called Task

SORTOF like this 

Task compile = new Task()
project.addTask(compile)

theyare added to the project during the build process
 */

plugins {
    id 'java'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}
// find default and builtin Project properties here: https://docs.gradle.org/current/userguide/writing_build_scripts.html
project.description = 'First Java Project'
project.version = 1.0
// to add/create custom properties use 'project.ext.yourCustomProperty'
project.ext.abz = 'my custom property'
repositories {
    // accessing built in project properites
    println project.name // read-only value - to set use settings.gradle
    println project.description 
    println project.version
    println project.path 
    println project.projectDir
    println project.buildDir
    // accessing custom properties
    println project.abz
    println project.property('abz') 
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.revature.App'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.revature.App'
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
